// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1.2 (swiftlang-1100.0.278 clang-1100.0.33.9)
// swift-module-flags: -target armv7-apple-ios9.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name FritzVisionStyleModelPatterns
import CoreML
import Foundation
@_exported import FritzVisionStyleModelPatterns
import Swift
@available(iOS 12.0, *)
@objc(PatternStyleModel) public class PatternStyleModel : ObjectiveC.NSObject {
  @objc(FritzVisionPatternStyle) public enum Style : Swift.Int, Swift.CaseIterable {
    case blueArrow
    case christmasLights
    case comic
    case filament
    case lampPost
    case mosaic
    case notreDame
    case shades
    case sketch
    case snowflake
    case sprinkles
    case swirl
    case tile
    case vector
    case kaleidoscope
    case pinkBlueRhombus
    public var name: Swift.String {
      get
    }
    public static func getFromName(_ name: Swift.String) -> FritzVisionStyleModelPatterns.PatternStyleModel.Style?
    public func build() -> FritzVision.FritzVisionStylePredictor
    public typealias RawValue = Swift.Int
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
    public typealias AllCases = [FritzVisionStyleModelPatterns.PatternStyleModel.Style]
    public static var allCases: [FritzVisionStyleModelPatterns.PatternStyleModel.Style] {
      get
    }
  }
  @objc(buildForPattern:) public static func build(_ style: FritzVisionStyleModelPatterns.PatternStyleModel.Style) -> FritzVision.FritzVisionStylePredictor
  @objc(allModels) public static func allModels() -> [FritzVision.FritzVisionStylePredictor]
  @objc override dynamic public init()
  @objc deinit
}
@available(iOS 12.0, *)
extension FritzVisionStyleModelPatterns.PatternStyleModel.Style : Swift.Equatable {}
@available(iOS 12.0, *)
extension FritzVisionStyleModelPatterns.PatternStyleModel.Style : Swift.Hashable {}
@available(iOS 12.0, *)
extension FritzVisionStyleModelPatterns.PatternStyleModel.Style : Swift.RawRepresentable {}
